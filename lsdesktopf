#!/bin/bash
##Version 3.0.0-0
#
#License: GPL
#
#Author: Andy Crowd
#Tested in Arch Linux
#Search in *.desktop for "Categories" and "Exec"
#

# sudo find /etc/ /usr/ /opt/ /lib/ /var/ -type f  -name "*\.desktop"  -exec dirname "{}" \; | sed 's/[0-9]/*/g' | sed 's/\*[\.]\*/*/g' |  uniq
# Decode variables: file /etc/xdg/xfce*/panel*/launcher-* | awk -F': ' '{print $1}' | grep -v \)$


## Check if exist config file
GlobalArray="/opt/share/list-desktop-files/sorted.test"
LocalArray="~/.list-desktop-path/custom-path/file.test"

if [[  ! -f "$LocalArray" ]];then

	if [[  -f "$GlobalArray" ]];then
FilePath="$GlobalArray"

else

	#	echo 'No config file found!!!'
#	echo 'To create new use options 
#--create-global-list | --cgl : scan system and save into /opt/share/list-desktop-files/sorted.test
#--create-local-list  | --cll : scan system and save into ~/.list-desktop-path/custom-path/sorted.test
#or save example file 
#/opt/share/list-desktop-files/folder_list.example.txt
#as sorted.test'
# exit 1
####################
####################
DefDskPath+=("/etc/dynamic/launchers/scanner")
DefDskPath+=("/etc/xdg/autostart")
DefDskPath+=("/etc/xdg/xfce*/panel/launcher-*")
DefDskPath+=("/lib/gnome-settings-daemon*")
DefDskPath+=("/lib/gnome-settings-daemon-*/gtk-modules")
DefDskPath+=("/lib/libreoffice/share/xdg")
DefDskPath+=("/usr/etc/xdg/autostart")
DefDskPath+=("/usr/lib/gnome-settings-daemon-*/gtk-modules")
DefDskPath+=("/usr/lib/libreoffice/share/xdg")
DefDskPath+=("/usr/local/share/applications")
DefDskPath+=("/usr/share/applications")
DefDskPath+=("/usr/share/apps/kdm/programs")
DefDskPath+=("/usr/share/apps/kdm/sessions")
DefDskPath+=("/usr/share/apps/solid/actions")
DefDskPath+=("/usr/share/autostart")
DefDskPath+=("/usr/share/dist/desktop-files/default")
DefDskPath+=("/usr/share/gdm/autostart")
DefDskPath+=("/usr/share/gdm/autostart/LoginWindow")
DefDskPath+=("/usr/share/gdm/greeter/autostart")
DefDskPath+=("/usr/share/gnome/autostart")
DefDskPath+=("/usr/share/kde*")
DefDskPath+=("/usr/share/mate/wm-properties")
DefDskPath+=("/usr/share/mga")
DefDskPath+=("/usr/share/mga/dm")
DefDskPath+=("/usr/share/mimelnk/application")
DefDskPath+=("/usr/share/mimelnk/chemical")
DefDskPath+=("/usr/share/parole")
DefDskPath+=("/usr/share/parole/parole-plugins-*")
DefDskPath+=("/usr/share/Thunar/sendto")
DefDskPath+=("/usr/share/wayland-sessions")
DefDskPath+=("/usr/share/xfce*/helpers")
DefDskPath+=("/usr/share/xfce*/helpers")
DefDskPath+=("/usr/share/xfce*/panel-plugins")
DefDskPath+=("/usr/share/xfce*/panel/plugins")
DefDskPath+=("/usr/share/xgreeters")
DefDskPath+=("/usr/share/xsessions")

ADskPath=($(for FromDDP in ${DefDskPath[@]};do
	file "$FromDDP";
done |sort|uniq|  grep -v \)$ | grep ^\/ | awk -F': ' '{print $1}'))

####################
####################
	fi
else
	FilePath="$LocalArray"
fi


IFS="
"
#echo ${#ADskPath[@]}
#exit 0
if [[ "${#ADskPath}" == 0 ]]; then
	ADskPath=($(sed -i -e 's/[0-9][0-9]*/*/g' -e 's/"//g' -e 's/\/$//g' -e 's/ /*/g' "$FilePath";
	while read FromFile;do echo "$FromFile"  ; done < "$FilePath" | awk '{system("file "$0)}' |sort|uniq|  grep -v \)$ | grep ^\/ | awk -F': ' '{print $1}'))

		BDskPath+=("~/.local/share/applications")
		BDskPath+=("~/.config/autostart")
		BDskPath+=("$XDG_CONFIG_DIRS/autostart")
		BDskPath+=("$XDG_CONFIG_HOME/autostart")

fi

for AddWithVariables in ${BDskPath[@]};
do
	if [ -d "$BDskPath" ];then
		ADskPath+="$AddWithVariables";
	fi
done
#ADskPath[0]="/usr/share/applications/"
#ADskPath[8]="~/.local/share/applications/"

#ADskPath[2]="/usr/local/share/applications"

#ADskPath[3]="/etc/xdg/autostart/"
#ADskPath[4]="~/.config/autostart/"

#ADskPath[5]="$XDG_CONFIG_DIRS/autostart/"
#ADskPath[6]="$XDG_CONFIG_HOME/autostart/"

#ADskPath[7]="/usr/share/gnome/autostart/"

#### Search with no subdirs # This is an example
## !!!!  some of the desktop environments can create the
## "Desktop" destination with another name, you must modify the script to fit your needs !!!!!
#MaxDepth[1]="-maxdepth 1"
#ADskPath[1]="~/Desktop"
####

#ADskPath[9]="/usr/etc/xdg/autostart/"
#ADskPath[10]="/usr/share/mimelnk/application/"
#ADskPath[11]="/usr/share/mimelnk/chemical/"
#ADskPath[12]="/usr/lib/libreoffice/share/xdg/"
#ADskPath[13]="/usr/share/xsessions/"
#ADskPath[14]="/usr/share/apps/kdm/sessions/"
#ADskPath[15]="/usr/share/gdm/greeter/autostart/"
#ADskPath[16]="/usr/share/wayland-sessions/"
#ADskPath[17]="/usr/share/apps/kdm/programs/"
#ADskPath[18]="/usr/share/mate/wm-properties/"

#ADskPath[19]="/usr/share/wayland-sessions/"

#ADskPath[20]="/usr/share/apps/solid/actions/"

#ADskPath[21]="/usr/share/xfce4/helpers/"

#ADskPath[22]="/usr/share/kde*"
#ADskPath[23]="/lib/libreoffice/share/xdg/"
#ADskPath[24]="/etc/dynamic/launchers/scanner/"
#ADskPath[25]="/lib/gnome-settings-daemon*"


#ADskPath[26]="/usr/share/xgreeters/"

#ADskPath[27]="/usr/share/dist/desktop-files/default/"
#ADskPath[28]="/usr/share/parole/"
#ADskPath[29]="/usr/share/mimelnk/application/"
#ADskPath[30]="/usr/share/gnome/autostart/"

#ADskPath[31]="/usr/share/Thunar/sendto/"
#ADskPath[32]="/usr/share/gdm/autostart/"
#ADskPath[33]="/usr/share/mga/"

One=$1
Two=$2
Three=$3
OldIFS=IFS
IFS="
"
NoEmpty=($(for InDskPath in ${ADskPath[@]};do echo $InDskPath|sort|uniq;done));
#unset IFS
#IFS=OldIFS
#DskPath=(${NoEmpty[@]})

ReCreateDskPath(){


case "$Opts" in
 
	OnlyNew1 )
DskPath=($(if [[ ! -z $2 ]]; then  
	 for StartCmdLine in $@;
 	 do

 if [[ -d "$StartCmdLine" ]]; then
  InPath="$StartCmdLine"
 fi

 find "$InPath" -type f -name "*\.desktop" | awk '{BaseName=$0; gsub(/[^.*]*\//,"",BaseName); print substr($0,0,index($0,BaseName)-1)}' | sort | uniq

 if [[ "$InPath" == "/" ]];then 
  exit
 fi

done
else
 find / -type f -name "*\.desktop" | awk '{BaseName=$0; gsub(/[^.*]*\//,"",BaseName); print substr($0,0,index($0,BaseName)-1)}' | sort | uniq
fi))

;;
	scan-sys-path )
		DskPath=($(find "/usr/"  "/etc/" "/opt/"  -type f -name "*\.desktop" | awk '{BaseName=$0; gsub(/[^.*]*\//,"",BaseName); print substr($0,0,index($0,BaseName)-1)}' | sort | uniq))
	
	;;
#	scan-root )
#		echo "   "Please wait...
#		DskPath=($(find "/"  -type f -name "*\.desktop" | awk '{BaseName=$0; gsub(/[^.*]*\//,"",BaseName); print substr($0,0,index($0,BaseName)-1)}' | sort | uniq))
#	
#	;;

	*)
	DskPath=(${NoEmpty[@]})
;;
esac

}


ListDefault(){

for fdPath in "${DskPath[@]}";do

	## Replace One with Two
if [[ ! -z "$One"   ]];then
 if [[ "$One" ==  "--all-sys-path" || "$One" == --asc ]];then
	 One=$Two
 fi
fi

if [[ -d "${DskPath[Count]}" || -f "${DskPath[Count]}"  ]];
 then
  printf "\e[1;36m ${fdPath} \e[0m \n";
  if [ ! -z "$One" ] && [[ -d "${fdPath}"  || -f "${fdPath}" ]] ;
    then

     find "${fdPath}" ${MaxDepth[Count]}  -iname "*\.desktop" -exec awk -v Fil="{}"  -v Seek="$One" -F"=" '//{
if(index($0,"Categories=") >= 1) Ctgr=substr($0,index($0,"=")+1);
if(index($0,"Name=")       == 1) inNm=substr($0,index($0,"=")+1);
if(index($0,"Comment=")    == 1) inComment=substr($0,index($0,"=")+1);
if(index($0,"Command")     == 1) inCmd=substr($0,index($0,"=")+1) ;
if(index($0,"Module=")     == 1) inExc=substr($0,index($0,"=")+1);
if(index($0,"Exec=")       == 1) inExc=substr($0,index($0,"=")+1);


if(index($0,"Category=") >= 1) Ctgr=substr($0,index($0,"=")+1);
if(index($0,"X-XFCE-Binaries=") >= 1) inExc=substr($0,index($0,"=")+1);

     }END{
if(! Ctgr ){E=inNm}else{E=Ctgr};
if(! inExc){CmdLine=inCmd}else{CmdLine=inExc};
if(! E)E=inComment;
 Z=CmdLine" # "E" #  "Fil;
if( index(tolower(Z),tolower(Seek)) && CmdLine  )  print Z;}' "{}" \;
    
    else
[[ -d "${fdPath}"  || -f "${fdPath}" ]] && find "${fdPath}" -iname "*.desktop" -exec awk -v Fil="{}"  -F"=" '//{
if(index($0,"Categories") == 1) Ctgr=substr($0,index($0,"=")+1);
if(index($0,"Name=")      == 1) inNm=substr($0,index($0,"=")+1);
if(index($0,"Exec=")      == 1) inExc=substr($0,index($0,"=")+1);
if(index($0,"Comment=")   == 1) inComment=substr($0,index($0,"=")+1);
if(index($0,"Command=")   == 1) inCmd=substr($0,index($0,"=")+1) ;

if(index($0,"Category=") >= 1) Ctgr=substr($0,index($0,"=")+1);
if(index($0,"X-XFCE-Binaries=") >= 1) inExc=substr($0,index($0,"=")+1);

}END{
if(! Ctgr ){E=inNm}else{E=Ctgr};
if(! inExc){CmdLine=inCmd}else{CmdLine=inExc};
if(! E)E=inComment;
 Z=CmdLine" # "E" # "Fil" # "XFCEb;
if(CmdLine)print Z;}' "{}" \;
 fi;
fi

done
}
###################  Search specific ####
OffPrint="no";

SearchContentOfVariable(){
for fdPath in "${DskPath[@]}";do

if [[ -d "${DskPath[Count]}" || -f "${DskPath[Count]}"  ]];
 then
[[ "$OffPrint" == "no" ]] &&  printf "\e[1;36m ${fdPath} \e[0m \n";

   if [ ! -z "$One" ] && [[ -d "${fdPath}"  || -f "${fdPath}" ]] ;
    then 
case $Opts in
	var )
		grep -e ^"$Var" $Additional -H -R --include \*.desktop "${fdPath}" 
		;;
	ddp ) 
                grep ^ -H -R --include \*.desktop "${fdPath}"
		;;
	sud )
		grep = -R -h --include \*.desktop "${fdPath}" | cut -d= -f 1 | grep -v "\[" | sort | uniq
		;;

esac
    fi;
fi


done
case  "$Opts" in
	sys-uniq)
#DskPath=($(find "/usr/" "/etc/" "/opt"  -type f -name "*\.desktop" | awk '{BaseName=$0; gsub(/[^.*]*\//,"",BaseName); print substr($0,0,index($0,BaseName)-1)}' | sort | uniq))
find "/usr/" "/etc/" "/opt"  -type f -name "*\.desktop" -exec grep ^ "{}"  \; | cut -d= -f1 | grep -v -e "\[" -e ^\#  | sort | uniq
;;
var-sys)
	grep -e ^"$Var" $Additional -H -R --include \*.desktop /usr/ /etc /opt
	;;
esac


}
####################
RawView(){
for fdPath in "${DskPath[@]}";do

if [[ -d "${DskPath[Count]}" || -f "${DskPath[Count]}"  ]];
 then
 [[ "$OffPrint" == "no" ]] &&  printf "\e[1;36m ${fdPath} \e[0m \n";

   if [ ! -z "$One" ] && [[ -d "${fdPath}"  || -f "${fdPath}" ]] ;
    then 
[[ "$Opts" == "suo"  ]] && find "${fdPath}" -type f -name "*\.desktop" -exec grep ^ "{}" \;

    fi;
fi

done | case $Opts in
	suo )
		grep = | cut -d= -f 1 | grep -v -e "\[" -e ^\# | sort | uniq
		;;

esac

}

###################



###################
###################

case "$1" in

--help ) 
	echo "OPTIONS
--help : show this help message
--var variable : search for variable in the *.desktop
--all-sys-path | --asc : scanning only in /etc /usr /opt , supports default options
 
 Show RAW content of files
--dump-all | --da : search in  / (may need root rights)
--dump-default-path | --ddp : search and dump content from default path
--dump-sys-path | --dsp : search and dump content from /usr /etc /opt

 Search content of variables
--show-uniq-def | --sud : show all uniq base variable names found in default path
--show-sys-uniq | --ssu : show uniq variable names found in sys path (/usr /etc /opt)
--find-uniq-path | --fup : find path that contain *.desktop files, default path is /
#disabled option, buggy --scan-root | --sr : scanning in / (may need root rights)
--create-global-list | --cgl : scan system and save into /opt/share/list-desktop-files/sorted.test
--create-local-list  | --cll : scan system and save into ~/.list-desktop-path/custom-path/sorted.test

 Usage:
List content with default options:
 lsdsk
Search only for specific text in default output:
 lsdsk gtk
 lsdsk game
Use --var option (supporting grep syntax):
--var Name=
--var 'Name\[zn_CN\]'
Scan for all *.desktop files in sys path (/usr /etc /opt)
--asc 
--asc gtk
Use --find-uniq-path or --fup 
--fup 
--fup /usr /etc
"
	;;
--var )
	ReCreateDskPath

if [[  ! -z "$2"    ]];then  
	Var="$2"
 if [[ "$#" -gt 2  ]];then 
OptionsToGrep=($@);
Additional="${OptionsToGrep[@]:2}"  ;
 fi;
	Opts="var"
	SearchContentOfVariable
else
	echo "Error, parameter to --var is missing
example: --var MimeType"
 fi	
 ;;
 --var-sys | --vs)
#	ReCreateDskPath

if [[  ! -z "$2"    ]];then  
	Var="$2"
 if [[ "$#" -gt 2  ]];then 
OptionsToGrep=($@);
Additional="${OptionsToGrep[@]:2}"  ;
 fi;
	Opts="var-sys"
	SearchContentOfVariable
else
	echo "Error, parameter to --var-sys is missing
example: --var MimeType"
 fi	
;;
--dump-all | --da ) 
	grep -i ^ -H -R --include \*.desktop "/"
	;;
--dump-sys-path | --dsp )
	grep -i ^ -H -R --include \*.desktop "/usr /etc /opt"

	;;
--dump-default-path | --ddp )
	Opts="ddp"
  ReCreateDskPath
     	SearchContentOfVariable

	;;
--show-uniq-def | --sud )
	Opts="sud"
 ReCreateDskPath
      	SearchContentOfVariable
	;;
--show-uniq-only | --suo )
OffPrint="yes"
Opts=suo
ReCreateDskPath

RawView
	;;	
--show-sys-uniq | --ssu )
Opts="sys-uniq"
	SearchContentOfVariable

	;;
--find-uniq-path | --fup )

if [[ ! -z $Two ]]; then  
	 for StartCmdLine in $@;
 	 do

 if [[ -d "$StartCmdLine" ]]; then
  InPath="$StartCmdLine"
 fi

 find "$InPath" -type f -name "*\.desktop"  -exec dirname "{}" \; | sort | uniq
 #| awk '{BaseName=$0; gsub(/[^.*]*\//,"",BaseName); print substr($0,0,index($0,BaseName)-1)}' | sort | uniq

 if [[ "$InPath" == "/" ]];then 
  exit
 fi

done
else
 find / -type f -name "*\.desktop" | awk '{BaseName=$0; gsub(/[^.*]*\//,"",BaseName); print substr($0,0,index($0,BaseName)-1)}' | sort | uniq
fi

;;
--all-sys-path | --asc)
Opts="scan-sys-path"
	ReCreateDskPath
	ListDefault
	;;
--scan-root | --sr)
Opts="scan-root"
	ReCreateDskPath
	ListDefault
	;;
--create-local-list | --cll)
	mkdir -p "$(dirname $LocalArray)"
	find / -type f -name "*\.desktop" -exec dirname "{}" \; | sort | uniq > "$LocalArray"
	;;
--create-global-list | --cgl)
	if [[ "$UID" != 0 ]];then  
		echo 'You must run it as user root'
		exit 1
	else
	mkdir -p "$(dirname $LocalArray)"
	find / -type f -name "*\.desktop" -exec dirname "{}" \; | sort | uniq > "$LocalArray"
	fi
	;;

* ) 
	ReCreateDskPath
	ListDefault
	;;

esac
